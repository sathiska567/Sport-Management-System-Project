{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType,\n    calc\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: unit(calc(size).sub(calc(lineWidth).mul(2)).equal()),\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);","map":{"version":3,"names":["unit","resetComponent","genStyleHooks","mergeToken","genBaseStyle","token","antCls","componentCls","iconCls","avatarBg","avatarColor","containerSize","containerSizeLG","containerSizeSM","textFontSize","textFontSizeLG","textFontSizeSM","borderRadius","borderRadiusLG","borderRadiusSM","lineWidth","lineType","calc","avatarSizeStyle","size","fontSize","radius","width","height","lineHeight","sub","mul","equal","position","left","_skip_check_","value","transformOrigin","margin","Object","assign","display","overflow","color","whiteSpace","textAlign","verticalAlign","background","border","objectFit","genGroupStyle","groupBorderColor","groupOverlapping","groupSpace","borderColor","marginInlineStart","prepareComponentToken","controlHeight","controlHeightLG","controlHeightSM","fontSizeLG","fontSizeXL","fontSizeHeading3","marginXS","marginXXS","colorBorderBg","Math","round","colorTextLightSolid","colorTextPlaceholder","avatarToken"],"sources":["/home/aathik/Desktop/swp edit/Sport-Management-System-Project/client/node_modules/antd/es/avatar/style/index.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { resetComponent } from '../../style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nconst genBaseStyle = token => {\n  const {\n    antCls,\n    componentCls,\n    iconCls,\n    avatarBg,\n    avatarColor,\n    containerSize,\n    containerSizeLG,\n    containerSizeSM,\n    textFontSize,\n    textFontSizeLG,\n    textFontSizeSM,\n    borderRadius,\n    borderRadiusLG,\n    borderRadiusSM,\n    lineWidth,\n    lineType,\n    calc\n  } = token;\n  // Avatar size style\n  const avatarSizeStyle = (size, fontSize, radius) => ({\n    width: size,\n    height: size,\n    lineHeight: unit(calc(size).sub(calc(lineWidth).mul(2)).equal()),\n    borderRadius: '50%',\n    [`&${componentCls}-square`]: {\n      borderRadius: radius\n    },\n    [`${componentCls}-string`]: {\n      position: 'absolute',\n      left: {\n        _skip_check_: true,\n        value: '50%'\n      },\n      transformOrigin: '0 center'\n    },\n    [`&${componentCls}-icon`]: {\n      fontSize,\n      [`> ${iconCls}`]: {\n        margin: 0\n      }\n    }\n  });\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'relative',\n      display: 'inline-block',\n      overflow: 'hidden',\n      color: avatarColor,\n      whiteSpace: 'nowrap',\n      textAlign: 'center',\n      verticalAlign: 'middle',\n      background: avatarBg,\n      border: `${unit(lineWidth)} ${lineType} transparent`,\n      [`&-image`]: {\n        background: 'transparent'\n      },\n      [`${antCls}-image-img`]: {\n        display: 'block'\n      }\n    }), avatarSizeStyle(containerSize, textFontSize, borderRadius)), {\n      [`&-lg`]: Object.assign({}, avatarSizeStyle(containerSizeLG, textFontSizeLG, borderRadiusLG)),\n      [`&-sm`]: Object.assign({}, avatarSizeStyle(containerSizeSM, textFontSizeSM, borderRadiusSM)),\n      '> img': {\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        objectFit: 'cover'\n      }\n    })\n  };\n};\nconst genGroupStyle = token => {\n  const {\n    componentCls,\n    groupBorderColor,\n    groupOverlapping,\n    groupSpace\n  } = token;\n  return {\n    [`${componentCls}-group`]: {\n      display: 'inline-flex',\n      [`${componentCls}`]: {\n        borderColor: groupBorderColor\n      },\n      [`> *:not(:first-child)`]: {\n        marginInlineStart: groupOverlapping\n      }\n    },\n    [`${componentCls}-group-popover`]: {\n      [`${componentCls} + ${componentCls}`]: {\n        marginInlineStart: groupSpace\n      }\n    }\n  };\n};\nexport const prepareComponentToken = token => {\n  const {\n    controlHeight,\n    controlHeightLG,\n    controlHeightSM,\n    fontSize,\n    fontSizeLG,\n    fontSizeXL,\n    fontSizeHeading3,\n    marginXS,\n    marginXXS,\n    colorBorderBg\n  } = token;\n  return {\n    containerSize: controlHeight,\n    containerSizeLG: controlHeightLG,\n    containerSizeSM: controlHeightSM,\n    textFontSize: Math.round((fontSizeLG + fontSizeXL) / 2),\n    textFontSizeLG: fontSizeHeading3,\n    textFontSizeSM: fontSize,\n    groupSpace: marginXXS,\n    groupOverlapping: -marginXS,\n    groupBorderColor: colorBorderBg\n  };\n};\nexport default genStyleHooks('Avatar', token => {\n  const {\n    colorTextLightSolid,\n    colorTextPlaceholder\n  } = token;\n  const avatarToken = mergeToken(token, {\n    avatarBg: colorTextPlaceholder,\n    avatarColor: colorTextLightSolid\n  });\n  return [genBaseStyle(avatarToken), genGroupStyle(avatarToken)];\n}, prepareComponentToken);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}