{"ast":null,"code":"var _jsxFileName = \"/home/aathik/Desktop/swp edit/Sport-Management-System-Project/client/src/user/ResetPass.jsx\";\n// ResetPassword.js\nimport React from 'react';\nimport { Form, Input, Button, Typography } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title\n} = Typography;\nconst ResetPassword = () => {\n  const onFinish = values => {\n    console.log('Received values:', values);\n    // Implement logic to reset password\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: '400px',\n      margin: 'auto',\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      level: 2,\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      name: \"resetPasswordForm\",\n      initialValues: {\n        remember: true\n      },\n      onFinish: onFinish,\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"New Password\",\n        name: \"newPassword\",\n        rules: [{\n          required: true,\n          message: 'Please input your new password!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {\n          placeholder: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Confirm Password\",\n        name: \"confirmPassword\",\n        dependencies: ['newPassword'],\n        hasFeedback: true,\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, ({\n          getFieldValue\n        }) => ({\n          validator(_, value) {\n            if (!value || getFieldValue('newPassword') === value) {\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error('The two passwords do not match!'));\n          }\n        })],\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {\n          placeholder: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          style: {\n            width: '100%'\n          },\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","Form","Input","Button","Typography","jsxDEV","_jsxDEV","Title","ResetPassword","onFinish","values","console","log","style","maxWidth","margin","textAlign","marginTop","children","level","fileName","_jsxFileName","lineNumber","columnNumber","name","initialValues","remember","Item","label","rules","required","message","Password","placeholder","dependencies","hasFeedback","getFieldValue","validator","_","value","Promise","resolve","reject","Error","type","htmlType","width","_c","$RefreshReg$"],"sources":["/home/aathik/Desktop/swp edit/Sport-Management-System-Project/client/src/user/ResetPass.jsx"],"sourcesContent":["// ResetPassword.js\nimport React from 'react';\nimport { Form, Input, Button, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst ResetPassword = () => {\n  const onFinish = (values) => {\n    console.log('Received values:', values);\n    // Implement logic to reset password\n  };\n\n  return (\n    <div style={{ maxWidth: '400px', margin: 'auto', textAlign: 'center', marginTop: '50px' }}>\n      <Title level={2}>Reset Password</Title>\n      <Form\n        name=\"resetPasswordForm\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        style={{ marginTop: '20px' }}\n      >\n        <Form.Item\n          label=\"New Password\"\n          name=\"newPassword\"\n          rules={[{ required: true, message: 'Please input your new password!' }]}\n        >\n          <Input.Password placeholder=\"New Password\" />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Confirm Password\"\n          name=\"confirmPassword\"\n          dependencies={['newPassword']}\n          hasFeedback\n          rules={[\n            { required: true, message: 'Please confirm your password!' },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('newPassword') === value) {\n                  return Promise.resolve();\n                }\n                return Promise.reject(new Error('The two passwords do not match!'));\n              },\n            }),\n          ]}\n        >\n          <Input.Password placeholder=\"Confirm Password\" />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }}>\n            Reset\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}